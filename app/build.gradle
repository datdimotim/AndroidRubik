plugins {
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    id "com.github.breadmoirai.github-release" version "2.2.12"
}

apply plugin: 'com.android.application'

task generateSomeAppResources {
    ext.outputDir = new File(projectDir, "build/generated/res/raw/")
    doFirst {
        mkdir outputDir
        new File(outputDir, "git.properties").bytes = new File(projectDir, "build/resources/main/git.properties").bytes
    }
}

//preBuild.dependsOn('generateGitProperties')

generateSomeAppResources.dependsOn('generateGitProperties')

gradle.projectsEvaluated {
    preBuild.dependsOn('generateSomeAppResources')
}

def gitInfo = { ->
    def commitHash = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }()

    def branchName = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }()

    def commitNumber = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }()

    def workDirIsClean = (exec {
        commandLine 'git', 'diff', '--exit-code'
        standardOutput = new ByteArrayOutputStream()
        ignoreExitValue = true
    }).exitValue == 0


    Map map = new HashMap();
    map.put("branch", branchName)
    map.put("commitHash", commitHash)
    map.put("commitNumber", commitNumber)
    map.put("workDirIsClean", workDirIsClean)
    map.put("build-sign", commitHash + (workDirIsClean ? '' : '-dirty' ))
    return map;
}()

def branchName = gitInfo.get('branch')
def commitHash = gitInfo.get('commitHash')
def commitNumber = gitInfo.get('commitNumber')
def workDirIsClean = gitInfo.get('workDirIsClean')
def buildSing = gitInfo.get('build-sign')

println gitInfo

def releaseApk = {new File(buildDir.getPath()+"/outputs/apk/release").listFiles((FilenameFilter){ dir, filename -> filename.endsWith("apk") })}

tasks.githubRelease.dependsOn('build')
tasks.githubRelease.doFirst {
    if(branchName != 'master') throw new IllegalStateException('current branch is not master')
    if(!workDirIsClean) throw new IllegalStateException('cannot release dirty commit')

    def res = releaseApk()
    if(res == null) throw new IllegalStateException('release apk is not found')
    def count = res.size();
    if(count == 0) throw new IllegalStateException('release apk is not found')
    if(count > 1) throw new IllegalStateException('multiple release apks: '+res.toString())


}

githubRelease {
    token findProperty('github.token')?: '' // This is your personal access token with Repo permissions
    // You get this from your user settings > developer settings > Personal Access Tokens
    owner "datdimotim" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
    repo "AndroidRubik" // by default this is set to your project name
    tagName "v1.0."+commitNumber // by default this is set to "v${project.version}"
    targetCommitish "master" // by default this is set to "master"
    releaseName "v1.0."+commitNumber // Release title, by default this is the same as the tagName
    //body "" // by default this is empty
    //draft false // by default this is false
    //prerelease false // by default this is false
    releaseAssets {releaseApk()} // this points to which files you want to upload as assets with your release

    overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
    dryRun false // by default false; you can use this to see what actions would be taken without making a release
    apiEndpoint "https://api.github.com" // should only change for github enterprise users
    client // This is the okhttp client used for http requests
}


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.dimotim.kubsolver"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "gitHash", "\""+buildSing+"\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "resourcePackageName": "com.dimotim.kubsolver"
                ]
            }
        }
    }

    sourceSets {
        main {
            res.srcDirs += [
                    'build/generated/res',
            ]
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFile 'proguard-rules.txt'
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = applicationName + "-" + buildSing + ".apk"
                }
            }
        }

        debug {
            minifyEnabled true
            proguardFile 'proguard-rules.txt'
            applicationIdSuffix ".debug"
        }

    }
}


repositories {
    maven {
        url "https://s3.amazonaws.com/repo.commonsware.com"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.github.datdimotim:KubSolver:3.0.7'
    implementation 'com.commonsware.cwac:layouts:0.4.3'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation('com.journeyapps:zxing-android-embedded:4.1.0') { transitive = false }
    implementation 'com.google.zxing:core:3.3.0'

    implementation 'com.google.code.gson:gson:2.8.5'

    annotationProcessor "org.androidannotations:androidannotations:4.8.0"
    implementation "org.androidannotations:androidannotations-api:4.8.0"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}
