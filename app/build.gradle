plugins {
    id "com.github.breadmoirai.github-release" version "2.2.12"
}

apply plugin: 'com.android.application'



def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }


    def code = exec {
        commandLine 'git', 'diff', '--exit-code'
        standardOutput = new ByteArrayOutputStream()
        ignoreExitValue = true
    }

    def workDirIsClear = code.exitValue == 0
    def suffix
    if(workDirIsClear)suffix=""
    else suffix="-dirty"

    return stdout.toString().trim() + suffix
}

def gitHash=getGitHash()

githubRelease {
    token getProperty('github.token') // This is your personal access token with Repo permissions
    // You get this from your user settings > developer settings > Personal Access Tokens
    //owner "breadmoirai" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
    //repo "github-release" // by default this is set to your project name
    tagName "v1.0.0" // by default this is set to "v${project.version}"
    targetCommitish "master" // by default this is set to "master"
    //releaseName "v1.0.0" // Release title, by default this is the same as the tagName
    //body "" // by default this is empty
    //draft false // by default this is false
    //prerelease false // by default this is false
    releaseAssets new File(buildDir.getPath()+"/outputs/apk/release")
            .listFiles((FilenameFilter){ dir, filename -> filename.endsWith("apk") }) // this points to which files you want to upload as assets with your release

    overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
    dryRun true // by default false; you can use this to see what actions would be taken without making a release
    apiEndpoint "https://api.github.com" // should only change for github enterprise users
    client // This is the okhttp client used for http requests
}

tasks.githubRelease.dependsOn('build')

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.dimotim.kubSolver.kubsolver"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "gitHash", "\""+gitHash+"\""
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = applicationName + "-" + gitHash + ".apk"
                }
            }
        }
    }
}


repositories {
    maven {
        url "https://s3.amazonaws.com/repo.commonsware.com"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.github.datdimotim:KubSolver:3.0.7'
    implementation 'com.commonsware.cwac:layouts:0.4.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}
